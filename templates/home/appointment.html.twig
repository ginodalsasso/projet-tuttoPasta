{% extends 'base.html.twig' %}

{% block title %}Tutto Pasta - Rendez-Vous{% endblock %}

{% block body %}

    {# {{form(form)}} #}
    {{ form_start(form) }}
        {{ form_row(form.name) }}
        {{ form_errors(form.name) }}
        {{ form_row(form.email) }}
        {{ form_errors(form.email) }}
        {{ form_row(form.message) }}
        {{ form_errors(form.message) }}
        {{ form_row(form.startDate)}}
        <div id="available-rdv"></div>
        <input type="hidden" id="selectedSlot" name="selectedSlot" value="">

        {# {{ form_row(form.services) }} #}
        {# {{dump(form.services)}} #}
        {# <div id="services" data-prototype="{{ form_widget(form.services.vars.prototype)|e('html_attr') }}">
            {{ form_widget(form.services) }}
        </div> #}
        
        {{ form_row(form.save) }}
        {{ form_end(form) }}
        
        <div id="datepicker"></div>
{% endblock body %}

{% block javascripts %}
        
    <script>

            /* document.addEventListener('DOMContentLoaded', function() {
                var collectionHolder = document.querySelector('#services');
                    var prototype = collectionHolder.dataset.prototype;
                    var index = collectionHolder.dataset.index * 1 || collectionHolder.querySelectorAll('input').length;
                    var newForm = prototype.replace(/__name__/g, index);
                    collectionHolder.dataset.index = index + 1;
                    var newFormDiv = document.createElement('div');
                    newFormDiv.innerHTML = newForm;
                    collectionHolder.appendChild(newFormDiv);
                })*/
        // Sélection des éléments et initialisation des variables
        document.addEventListener('DOMContentLoaded', function() {
            const startDate = document.querySelector('#appointment_startDate');
            const availableRdv = document.getElementById('available-rdv');
            const selectedSlot = document.getElementById('selectedSlot');

            // détecter les changements de la date de début
            startDate.addEventListener('change', function() {
                // Récupère la date sélectionnée
                const selectedDate = startDate.value;

                // Envoie une requête POST pour obtenir les créneaux horaires disponibles pour la date sélectionnée
                fetch("{{ path('available_rdv') }}", {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded', // Spécifie le type de contenu des données envoyées
                    },
                    body: new URLSearchParams({
                        startDate: selectedDate // Envoie la date sélectionnée comme donnée du formulaire
                    }),
                })
                .then(response => response.json()) // Convertit la réponse en JSON
                .then(data => {
                    // Vérifie si les créneaux horaires disponibles sont un tableau
                    if (Array.isArray(data.availabilities)) {
                        // Réinitialise le conteneur des créneaux horaires disponibles
                        availableRdv.innerHTML = '';

                        // Récupère tous les créneaux horaires disponibles et réservés
                        const allSlots = data.availabilities[0];
                        const bookedSlots = data.availabilities[1];
                        

                        // Parcourt tous les créneaux horaires disponibles
                        allSlots.forEach(slot => {
                            // Crée un élément label pour le créneau horaire
                            const label = document.createElement('label');
                            // Crée un élément input pour le créneau horaire
                            const input = document.createElement('input');
                            input.type = 'radio';
                            input.name = 'selectedSlotRadio';
                            input.value = slot;
                            input.className = 'slot-radio';

                            // Désactive le créneau horaire si celui-ci est déjà réservé
                            if (bookedSlots.includes(slot)) {
                                input.disabled = true;
                                label.classList.add('disabled-slot');
                                label.style.opacity = 0.3;
                            }

                            // Ajoute l'input radio et le texte du créneau horaire au label
                            label.appendChild(input);
                            label.appendChild(document.createTextNode(formatTime(slot)));
                            // Ajoute le label au conteneur des créneaux horaires disponibles
                            availableRdv.appendChild(label);

                            // Ajoute un écouteur d'événement pour mettre à jour la valeur du champ caché lorsque l'utilisateur sélectionne un créneau horaire
                            input.addEventListener('change', function() {
                                selectedSlot.value = slot;
                            });
                        });
                    } else {
                        // Affiche une erreur dans la console si le format des données est invalide
                        console.error('Format de données invalide !');
                    }
                })
            });

            // Fonction pour formater l'heure d'un créneau horaire en fonction de la locale 'fr-FR'
            function formatTime(dateTimeString) {
                const dateTime = new Date(dateTimeString);
                return dateTime.toLocaleTimeString('fr-FR', {
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }
        });

        document.addEventListener('DOMContentLoaded', (event) => {
            const datePicker = document.getElementById('datePicker');
        
            datePicker.addEventListener('input', function () {
                const selectedDate = new Date(this.value);
                const day = selectedDate.getUTCDay();
        
                // 0 = Sunday, 6 = Saturday
                if (day === 0 || day === 6) {
                    alert("Weekends are not allowed. Please choose a weekday.");
                    this.value = ''; // Clear the input
                }
            });
        });
</script>

{% endblock %}